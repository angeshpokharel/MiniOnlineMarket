{"ast":null,"code":"import axios from \"axios\";\nconst BASE_DOMAIN = 'http://localhost:8080/orders';\nexport async function getAllOrders() {\n  /* const response = axios.get(BASE_DOMAIN)\n      .then((res) => {\n        console.log(response);\n      }) */\n  const response = await fetch(`${BASE_DOMAIN}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch orders.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\nexport async function getOrderByUserId(userId) {\n  const response = await fetch(`${BASE_DOMAIN}/${userId}/orders`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch orders.');\n  }\n\n  const loadedOrder = {\n    id: userId,\n    ...data\n  };\n  return loadedOrder;\n}\nexport async function getOrderDetailsByOrderId(orderId) {\n  const response = await fetch(`${BASE_DOMAIN}/${orderId}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch orders.');\n  }\n\n  const loadedOrder = {\n    id: orderId,\n    ...data\n  };\n  return loadedOrder;\n}\nexport async function updateOrderStatus(statusData, orderId) {\n  console.log(statusData.orderId);\n  const response = await fetch(`${BASE_DOMAIN}/${statusData.orderId}`, {\n    method: 'PUT',\n    body: JSON.stringify(statusData.status.text),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not update status.');\n  }\n  /* return { orerId: data.name }; */\n\n\n  return null;\n}\n/* export async function addQuote(statusData) {\n  const response = await fetch(`${BASE_DOMAIN}/quotes.json`, {\n    method: 'PUT',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n} */\n\n/* export async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments; \n} */","map":{"version":3,"sources":["/Users/wineikhaing/Desktop/MIU/WAA/Project/Code/MiniOnlineMarket/mom/src/lib/api.js"],"names":["axios","BASE_DOMAIN","getAllOrders","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getOrderByUserId","userId","loadedOrder","getOrderDetailsByOrderId","orderId","updateOrderStatus","statusData","console","log","method","body","JSON","stringify","status","text","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,WAAW,GAAG,8BAApB;AAEA,OAAO,eAAeC,YAAf,GAA8B;AAEnC;;;;AAKA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,WAAY,EAAhB,CAA5B;AACA,QAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,MAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,yBAA1B,CAAN;AACD;;AAED,QAAMC,iBAAiB,GAAG,EAA1B;;AAEA,OAAK,MAAMC,GAAX,IAAkBN,IAAlB,EAAwB;AACtB,UAAMO,QAAQ,GAAG;AACfC,MAAAA,EAAE,EAAEF,GADW;AAEf,SAAGN,IAAI,CAACM,GAAD;AAFQ,KAAjB;AAKAD,IAAAA,iBAAiB,CAACI,IAAlB,CAAuBF,QAAvB;AACD;;AAED,SAAOF,iBAAP;AACD;AAED,OAAO,eAAeK,gBAAf,CAAgCC,MAAhC,EAAwC;AAC7C,QAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,WAAY,IAAGe,MAAO,SAA1B,CAA5B;AACA,QAAMX,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,MAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,yBAA1B,CAAN;AACD;;AAED,QAAMQ,WAAW,GAAG;AAClBJ,IAAAA,EAAE,EAAEG,MADc;AAElB,OAAGX;AAFe,GAApB;AAKA,SAAOY,WAAP;AACD;AAED,OAAO,eAAeC,wBAAf,CAAwCC,OAAxC,EAAiD;AACpD,QAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,WAAY,IAAGkB,OAAQ,EAA3B,CAA5B;AACA,QAAMd,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,MAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,yBAA1B,CAAN;AACD;;AAED,QAAMQ,WAAW,GAAG;AAClBJ,IAAAA,EAAE,EAAEM,OADc;AAElB,OAAGd;AAFe,GAApB;AAKA,SAAOY,WAAP;AACD;AAED,OAAO,eAAeG,iBAAf,CAAiCC,UAAjC,EAA6CF,OAA7C,EAAsD;AAC3DG,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACF,OAAvB;AACA,QAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,WAAY,IAAGoB,UAAU,CAACF,OAAQ,EAAtC,EAAyC;AACnEK,IAAAA,MAAM,EAAE,KAD2D;AAEnEC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,UAAU,CAACO,MAAX,CAAkBC,IAAjC,CAF6D;AAGnEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAH0D,GAAzC,CAA5B;AAOA,QAAMzB,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;;AAEA,MAAI,CAACH,QAAQ,CAACI,EAAd,EAAkB;AAChB,UAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAL,IAAgB,0BAA1B,CAAN;AACD;AAED;;;AACA,SAAO,IAAP;AACD;AAEH;;;;;;;;;;;;;;;;;AAkBA","sourcesContent":["import axios from \"axios\";\n\nconst BASE_DOMAIN = 'http://localhost:8080/orders';\n\nexport async function getAllOrders() {\n\n  /* const response = axios.get(BASE_DOMAIN)\n      .then((res) => {\n        console.log(response);\n      }) */\n\n  const response = await fetch(`${BASE_DOMAIN}`);\n  const data = await response.json(); \n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch orders.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getOrderByUserId(userId) {\n  const response = await fetch(`${BASE_DOMAIN}/${userId}/orders`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch orders.');\n  }\n\n  const loadedOrder = {\n    id: userId,\n    ...data,\n  };\n\n  return loadedOrder;\n}\n\nexport async function getOrderDetailsByOrderId(orderId) {\n    const response = await fetch(`${BASE_DOMAIN}/${orderId}`);\n    const data = await response.json();\n  \n    if (!response.ok) {\n      throw new Error(data.message || 'Could not fetch orders.');\n    }\n  \n    const loadedOrder = {\n      id: orderId,\n      ...data,\n    };\n  \n    return loadedOrder;\n  }\n\n  export async function updateOrderStatus(statusData, orderId) {\n    console.log(statusData.orderId);\n    const response = await fetch(`${BASE_DOMAIN}/${statusData.orderId}`, {\n      method: 'PUT',\n      body: JSON.stringify(statusData.status.text),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    const data = await response.json();\n  \n    if (!response.ok) {\n      throw new Error(data.message || 'Could not update status.');\n    }\n  \n    /* return { orerId: data.name }; */\n    return null;\n  }\n\n/* export async function addQuote(statusData) {\n  const response = await fetch(`${BASE_DOMAIN}/quotes.json`, {\n    method: 'PUT',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n} */\n\n\n/* export async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments; \n} */\n "]},"metadata":{},"sourceType":"module"}